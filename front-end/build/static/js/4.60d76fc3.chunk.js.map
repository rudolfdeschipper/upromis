{"version":3,"sources":["components/Utils.tsx","components/Contract/ContractAPI.ts","components/Contract/ContractDeleteForm.tsx","components/Contract/Contract.tsx"],"names":["Utils","d","date","Date","getDate","toString","getMonth","getFullYear","a","w","toFixed","k","b","Math","abs","substr","s","i","length","r","desc","undefined","Infinity","aDate","bDate","ContractAPI","loadList","listInfo","fetch","method","headers","body","JSON","stringify","page","pageSize","sorted","filtered","then","response","json","loadListForExport","title","blob","url","window","URL","createObjectURL","document","createElement","filename","formatDate","now","replace","href","download","click","remove","catch","e","console","error","saveRecord","message","action","id","dataSubject","subaction","additionalData","loadOneRecord","ID","loadDropdownValues","valueType","ContractDeleteForm","props","state","isSubmitting","initialValues","this","currentData","enableReinitialize","validationSchema","Yup","code","max","required","description","startdate","enddate","status","oneOf","value","onSubmit","values","setSubmitting","saveAction","mode","name","label","disabled","className","type","step","buttonText","React","Component","Contract","openDeleteModal","row","setState","modalDeleteIsOpen","currentRecord","data","_index","modifier","closeDeleteModalNoSave","closeDeleteModalWithSave","record","saveOneRecord","alert","toSave","result","success","loadData","loading","res","pages","currentFilter","currentSort","finally","downloadToExcel","performAction1","columns","Header","Cell","to","onClick","sortable","accessor","show","formatAmount","style","sortMethod","dateSorter","manual","filterable","minRows","onFetchData","isOpen","toggle","charCode","displayName"],"mappings":"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","file":"static/js/4.60d76fc3.chunk.js","sourcesContent":["\r\nexport class Utils {\r\n\r\n    static formatDate(d: any) {\r\n        if (d == null || d === 'undefined') {\r\n            return \"\"\r\n        }\r\n        let date = new Date(d)\r\n        const months = [\"Jan\", \"Feb\", \"Mar\", \"Apr\", \"May\", \"Jun\", \"Jul\", \"Aug\", \"Sep\", \"Oct\", \"Nov\", \"Dec\"]\r\n        return date.getDate().toString() + \"/\" + months[date.getMonth()] + \"/\" + date.getFullYear().toString()\r\n    }\r\n\r\n    static formatDateForEdit(d: any) {\r\n        const date = new Date(d)\r\n        // const frmDate = (new Intl.DateTimeFormat(\"en-GB\", { year: 'numeric', month: 'short', day: '2-digit' } )).format(date)\r\n        const dateAsString = date.getFullYear().toString() + \"/\" + (date.getMonth() + 1).toString() + \"/\" + date.getDate().toString()\r\n        return dateAsString\r\n    }\r\n\r\n    static formatAmount(a: number) {\r\n        const dp = 2\r\n        var w = a.toFixed(dp), k = (w as any) | 0, b = a < 0 ? 1 : 0,\r\n            u = Math.abs((w as any) - k), d = ('' + u.toFixed(dp)).substr(2, dp),\r\n            s = '' + k, i = s.length, r = '';\r\n        while ((i -= 3) > b) { r = ',' + s.substr(i, 3) + r; }\r\n        return \"\\u20AC \" + s.substr(0, i + 3) + r + (d ? '.' + d : '');\r\n    }\r\n\r\n    static dateSorter(a: any, b: any, desc: boolean) {\r\n        // force null and undefined to the bottom\r\n        a = a === null || a === undefined ? -Infinity : a\r\n        b = b === null || b === undefined ? -Infinity : b\r\n\r\n        let aDate = new Date(a)\r\n        let bDate = new Date(b)\r\n\r\n        if (aDate > bDate) {\r\n            return desc ? -1 : 1\r\n        }\r\n        if (aDate < bDate) {\r\n            return desc ? 1 : -1\r\n        }\r\n        // returning 0 or undefined will use any subsequent column sorting methods or the row index as a tiebreaker\r\n        return 0\r\n    }\r\n\r\n}","import { ILoadResult, IListInfo, ISaveMessage, IAPIResult, ISelectValueList } from '../GeneralTypes';\r\nimport { Utils } from '../Utils';\r\n\r\nimport { IContractData } from './ContractTypes';\r\n\r\nexport class ContractAPI {\r\n\r\n    static loadList = (listInfo: IListInfo) => fetch('http://localhost:5001/api/home/getcontractdata', {\r\n        method: 'POST',\r\n        headers: {\r\n            'Accept': 'application/json, text/plain, */*',\r\n            'Content-Type': 'application/json;charset=UTF-8'\r\n        },\r\n        body: JSON.stringify({\r\n            page: listInfo.page,\r\n            pageSize: listInfo.pageSize,\r\n            sorted: listInfo.sorted,\r\n            filtered: listInfo.filtered\r\n        })\r\n    })\r\n        .then(response => {\r\n            return response.json() as Promise<ILoadResult<IContractData>>;\r\n        })\r\n        ;\r\n\r\n    static loadListForExport = (title: string, listInfo: IListInfo) => fetch('http://localhost:5001/api/home/getcontractdataexport', {\r\n        method: 'post',\r\n        headers: {\r\n            'Accept': 'application/json, text/plain, */*',\r\n            'Content-Type': 'application/json'\r\n        },\r\n        body: JSON.stringify({\r\n            page: 1,\r\n            pageSize: listInfo.pageSize,\r\n            sorted: listInfo.sorted,\r\n            filtered: listInfo.filtered\r\n        })\r\n    })\r\n        .then(response => {\r\n            response.blob().then(blob => {\r\n                let url = window.URL.createObjectURL(blob);\r\n                let a = document.createElement('a');\r\n                let filename = title + \" - \" + Utils.formatDate(Date.now()).replace(/\\//g, \"-\") + \".xlsx\";\r\n                a.href = url;\r\n                a.download = filename;\r\n                a.click();\r\n                a.remove();\r\n            });\r\n        })\r\n        .catch(e => console.error(e))\r\n        ;\r\n\r\n    static saveRecord = (message: ISaveMessage<IContractData>): Promise<IAPIResult<IContractData>> => {\r\n\r\n        return fetch('http://localhost:5001/api/home/postonecontractdata', {\r\n            method: message.action,\r\n            headers: {\r\n                'Accept': 'application/json, text/plain, */*',\r\n                'Content-Type': 'application/json;charset=UTF-8'\r\n            },\r\n            body: JSON.stringify({\r\n                id: message.id,\r\n                dataSubject: message.dataSubject as IContractData,\r\n                action: message.action,\r\n                subaction: message.subaction,\r\n                additionalData: message.additionalData\r\n\r\n            })\r\n        })\r\n            .then(response => {\r\n                return response.json() as Promise<IAPIResult<IContractData>>;\r\n            })\r\n    };\r\n\r\n    static loadOneRecord = (id: number): Promise<IAPIResult<IContractData>> => {\r\n        return (fetch('http://localhost:5001/api/home/getonecontractdata', {\r\n            method: 'post',\r\n            headers: {\r\n                'Accept': 'application/json, text/plain, */*',\r\n                'Content-Type': 'application/json'\r\n            },\r\n            body: JSON.stringify({\r\n                ID: id\r\n            })\r\n        })\r\n            .then(response => {\r\n                return response.json() as Promise<IAPIResult<IContractData>>;\r\n            }))\r\n    }\r\n\r\nstatic loadDropdownValues = (valueType: string): Promise<ISelectValueList> => {\r\n    return (fetch('http://localhost:5001/api/home/getselectvalues', {\r\n        method: 'post',\r\n        headers: {\r\n            'Accept': 'application/json, text/plain, */*',\r\n            'Content-Type': 'application/json'\r\n        },\r\n        body: JSON.stringify({\r\n            valueType: valueType\r\n        })\r\n    })\r\n        .then(response => {\r\n            return response.json() as Promise<ISelectValueList>;\r\n        }))\r\n\r\n}\r\n\r\n}","import React from 'react';\r\nimport { Formik } from 'formik';\r\nimport * as Yup from 'yup';\r\nimport { Form, SubmitBtn, Input, Textarea, Datepicker } from 'react-formik-ui'\r\n\r\nimport { IContractData } from './ContractTypes';\r\n\r\ninterface IProps {\r\n    currentData: IContractData,\r\n    buttonText: string;\r\n    saveAction: (subaction: string, record: IContractData) => void\r\n}\r\n\r\ninterface IState {\r\n    isSubmitting: boolean;\r\n}\r\n\r\nclass ContractDeleteForm extends React.Component<IProps, IState> {\r\n\r\n    constructor(props: Readonly<IProps>) {\r\n        super(props);\r\n        this.state = { isSubmitting: false };\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <Formik\r\n                initialValues={this.props.currentData as any}\r\n                enableReinitialize={true}\r\n                validationSchema={Yup.object({\r\n                    code: Yup.string()\r\n                        .max(15, 'Must be 15 characters or less')\r\n                        .required('Required'),\r\n                    title: Yup.string()\r\n                        .max(100, 'Must be 100 characters or less')\r\n                        .required('Required'),\r\n                    description: Yup.string()\r\n                        .required('Required'),\r\n                    startdate: Yup.date()\r\n                        .required('Required'),\r\n                    enddate: Yup.date()\r\n                        .required('Required'),\r\n                    status: Yup.string()\r\n                        .required('Required')\r\n                        .oneOf(['Planned', 'Open', 'Closed']),\r\n                    value: Yup.number()\r\n                        .required('Required')\r\n                })}\r\n                onSubmit={(values, { setSubmitting }) => {\r\n                    this.props.saveAction(\"Delete\", values);\r\n                    setSubmitting(false);\r\n                }}\r\n            >\r\n                <Form mode=\"themed\">\r\n                    <Input name=\"id\" label=\"ID\" disabled />\r\n                    <Input name=\"code\" label=\"Code\" disabled/>\r\n                    <Input name=\"title\" label=\"Title\" disabled/>\r\n                    <Textarea name=\"description\" label=\"Description\" disabled />\r\n                    <div className=\"w3-cell-row\">\r\n                        <div className=\"w3-cell\">\r\n                            <Datepicker name=\"startdate\" label=\"Start/End date\" disabled />\r\n                        </div>\r\n                        <div className=\"w3-cell\">\r\n                            <Datepicker name=\"enddate\"  disabled/>\r\n                        </div>\r\n                    </div>\r\n                    <Input name='status' label='Status' disabled />\r\n                    <Input name=\"value\" type=\"number\" label=\"Value\" step=\"0.01\" disabled />\r\n                    <hr />\r\n                    <SubmitBtn className=\"w3-button w3-light-grey w3-round\" title={this.props.buttonText + \"s this record\"} disabled={this.state.isSubmitting}>\r\n                        <i className=\"fa fa-save\" ></i>&nbsp;{this.props.buttonText}\r\n                    </SubmitBtn>\r\n                </Form>\r\n            </Formik>\r\n        );\r\n    }\r\n};\r\nexport default ContractDeleteForm;\r\n","import React from 'react';\r\nimport ReactTable from 'react-table';\r\nimport \"react-table/react-table.css\";\r\nimport { Utils } from '../Utils';\r\nimport { Link, RouteComponentProps } from 'react-router-dom';\r\nimport { Modal, ModalHeader, ModalBody } from 'reactstrap';\r\nimport { IListState, ISaveMessage, IAPIResult } from '../GeneralTypes';\r\n\r\nimport ContractDeleteForm from './ContractDeleteForm';\r\nimport { IContractData } from './ContractTypes';\r\nimport { ContractAPI } from './ContractAPI';\r\n\r\nclass Contract extends React.Component<RouteComponentProps<{}>, IListState<IContractData>> {\r\n    static displayName = Contract.name;\r\n\r\n    // normalised structure:\r\n    // list - links to details page, and actions in the rows\r\n    // details page contains tabs\r\n    // with details on tab 1\r\n    // and sub-lists in tab 2 - n+1\r\n    // this component just contains the list\r\n    // sublists are also tabs with modal forms to add and edit\r\n    // (as in previous version)\r\n\r\n\r\n    constructor(props: Readonly<RouteComponentProps<{}>>) {\r\n        super(props);\r\n        this.state = {\r\n            data: [],\r\n            loading: false,\r\n            pages: -1,\r\n            currentSort: null,\r\n            currentFilter: null,\r\n            pageSize: 10,\r\n            message: \"\",\r\n            modalDeleteIsOpen: false,\r\n            currentRecord: null\r\n        };\r\n\r\n    }\r\n\r\n    private openDeleteModal = (row: { row: { _index: number } }) => {\r\n        this.setState(\r\n            {\r\n                modalDeleteIsOpen: true,\r\n                currentRecord: { ...this.state.data[row.row._index], modifier: \"Deleted\" }\r\n            });\r\n    }\r\n\r\n    private closeDeleteModalNoSave = () => {\r\n        this.setState(\r\n            {\r\n                modalDeleteIsOpen: false,\r\n                currentRecord: null\r\n            }\r\n        )\r\n    }\r\n\r\n    private closeDeleteModalWithSave = (subaction: string, record: IContractData) => {\r\n        this.saveOneRecord(subaction, record)\r\n            .then(() =>\r\n                this.setState(\r\n                    {\r\n                        modalDeleteIsOpen: false,\r\n                        currentRecord: null\r\n                    }\r\n                )\r\n            )\r\n            .catch(e => alert(e))\r\n    }\r\n\r\n    private saveOneRecord = (subaction: string, record: IContractData): Promise<IAPIResult<IContractData>> => {\r\n        const action = (record.modifier === \"Added\") ? \"POST\" : (record.modifier === \"Deleted\") ? \"DELETE\" : \"PUT\";\r\n        const toSave: ISaveMessage<IContractData> = { id: record.id, action: action, dataSubject: { ...record }, subaction: subaction, additionalData: [] };\r\n\r\n        // alert(\"saveOneRecord \" + JSON.stringify(toSave));\r\n\r\n        const res = (ContractAPI.saveRecord(toSave)\r\n            .then(result => {\r\n                if (result.success) {\r\n                    this.setState({ ...this.state, currentRecord: result.dataSubject })\r\n                    alert(result.message)\r\n                } else {\r\n                    alert(\"Save failed\")\r\n                }\r\n            }\r\n            )\r\n        ) as Promise<IAPIResult<IContractData>>;\r\n        return res;\r\n    }\r\n\r\n    private loadData = (state: any) => {\r\n        // show the loading overlay\r\n        this.setState({ loading: true })\r\n        // fetch your data\r\n\r\n        ContractAPI.loadList({ page: state.page, pageSize: state.pageSize, sorted: state.sorted, filtered: state.filtered })\r\n            .then(res => {\r\n                // Update react-table\r\n                this.setState({\r\n                    data: res.data,\r\n                    pages: res.pages,\r\n                    currentFilter: state.filtered,\r\n                    currentSort: state.sorted,\r\n                    message: res.message ? res.message : this.state.message\r\n                })\r\n            })\r\n            .catch(e => console.error(e))\r\n            .finally(() => this.setState({ loading: false }))\r\n    }\r\n\r\n    downloadToExcel = () => {\r\n        ContractAPI.loadListForExport(\"Contract data\", { page: 1, pageSize: this.state.pageSize, sorted: this.state.currentSort, filtered: this.state.currentFilter })\r\n            ;\r\n    }\r\n\r\n    //\r\n    // w3-styles are used to have properly behaving dropdown menu in the react-table \r\n    //\r\n    render() {\r\n        const columns = [\r\n            {\r\n                Header: 'Actions',\r\n                Cell: (row: { row: { id: any, _index: number; }; }) => (\r\n                    <div className=\"w3-bar\">\r\n                        <Link to={\"/contractdetails/\" + row.row.id} className=\"w3-bar-item w3-button\" title=\"Edit\">\r\n                            <i className=\"fa fa-pencil\" ></i>\r\n                        </Link>\r\n                        <button onClick={() => { this.openDeleteModal(row); }} className=\"w3-bar-item w3-button\" title=\"Delete\" >\r\n                            <i className=\"fa fa-trash-o\" ></i>\r\n                        </button>\r\n                        <div className=\"w3-dropdown-hover\">\r\n                            <button className=\"w3-button\" title=\"More actions...\">...</button>\r\n                            <div className=\"w3-dropdown-content w3-bar-block w3-card-4\">\r\n                                <a onClick={() => { this.performAction1(row); }} className=\"w3-bar-item w3-button\" >Action 1</a>\r\n                                <a href=\"#\" className=\"w3-bar-item w3-button\">Link 2</a>\r\n                                <a href=\"#\" className=\"w3-bar-item w3-button\">Link 3</a>\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                ),\r\n                sortable: false\r\n            },\r\n            {\r\n                Header: 'ID',\r\n                accessor: 'id',\r\n                show: false\r\n            },\r\n            {\r\n                Header: 'Code',\r\n                accessor: 'code'\r\n            },\r\n            {\r\n                Header: 'Title',\r\n                accessor: 'title'\r\n            },\r\n            {\r\n                Header: 'Status',\r\n                accessor: 'status'\r\n            },\r\n            {\r\n                Header: 'Description',\r\n                accessor: 'description'\r\n            },\r\n            {\r\n                id: 'value',\r\n                Header: 'Value',\r\n                accessor: (d: IContractData) => Utils.formatAmount(d.value),\r\n                style: { 'textAlign': \"right\" }\r\n            },\r\n            {\r\n                id: 'startdate',\r\n                Header: 'Start date',\r\n                accessor: (d: IContractData) => Utils.formatDate(d.startdate),\r\n                // date sorting\r\n                sortMethod: Utils.dateSorter\r\n            },\r\n            {\r\n                id: 'enddate',\r\n                Header: 'End date',\r\n                accessor: (d: IContractData) => Utils.formatDate(d.enddate),\r\n                // date sorting\r\n                sortMethod: Utils.dateSorter\r\n            }\r\n        ];\r\n\r\n\r\n        return (\r\n            <div className=\"upromisContent\">\r\n                <Link className=\"w3-button w3-light-grey w3-round\" title=\"Add new record\" to=\"/contractdetails/add\" >\r\n                    <i className=\"fa fa-plus-circle\" ></i>&nbsp;Add new\r\n                </Link>\r\n                <ReactTable className=\"-striped\"\r\n                    data={this.state.data}\r\n                    pages={this.state.pages}\r\n                    loading={this.state.loading}\r\n                    manual\r\n                    filterable\r\n                    minRows={1}\r\n                    onFetchData={this.loadData}\r\n                    columns={columns}\r\n                />\r\n                <p />\r\n                <button className=\"w3-button w3-light-grey w3-round\" onClick={this.downloadToExcel} title=\"Export to Excel\" >\r\n                    <i className=\"fa fa-file-excel-o\" ></i>&nbsp;Export\r\n                </button>\r\n                <Modal isOpen={this.state.modalDeleteIsOpen} >\r\n                    <ModalHeader toggle={this.closeDeleteModalNoSave} charCode=\"&times;\" >Delete Contract</ModalHeader>\r\n                    <ModalBody>\r\n                        <ContractDeleteForm buttonText=\"Delete\" currentData={this.state.currentRecord as IContractData}  saveAction={this.closeDeleteModalWithSave} />\r\n                    </ModalBody>\r\n                </Modal>\r\n            </div>\r\n        );\r\n    }\r\n\r\n    performAction1 = (row: { row: { id: any; _index: number; }; }) => {\r\n        // alert(\"perform Action 1: on \" + JSON.stringify(this.state.data[row.row._index]));\r\n        this.saveOneRecord(\"Action 1\", this.state.data[row.row._index]);\r\n    }\r\n}\r\n\r\n// required to have lazy loading\r\nexport default Contract;\r\n"],"sourceRoot":""}