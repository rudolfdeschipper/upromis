{"version":3,"sources":["components/NavMenu.tsx","components/Layout.tsx","components/Home.tsx","components/Counter.tsx","components/NotFoundPage.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["NavMenu","Navbar","collapseOnSelect","className","Brand","href","Toggle","aria-controls","Collapse","id","Nav","Item","Link","NavDropdown","title","Divider","this","props","User","onClick","alert","React","Component","displayName","name","Layout","children","Home","Counter","state","currentCount","incrementCounter","bind","setState","NotFoundPage","App","_user","contract","lazy","contractdetails","Oidc","authority","client_id","redirect_uri","response_type","scope","post_logout_redirect_uri","getUser","then","user","console","log","fallback","exact","path","component","nfp","Boolean","window","location","hostname","match","rootElement","document","getElementById","ReactDOM","render","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.d4db9bc2.chunk.js","sourcesContent":["import React, { Component } from 'react';\r\nimport Navbar from 'react-bootstrap/Navbar'\r\nimport NavDropdown from 'react-bootstrap/NavDropdown';\r\nimport Nav from 'react-bootstrap/Nav';\r\nimport './NavMenu.css';\r\nimport { RouteComponentProps } from 'react-router';\r\n\r\nexport class NavMenu extends React.Component<{ User: any }> {\r\n    static displayName = NavMenu.name;\r\n\r\n    render() {\r\n        return (\r\n            <header>\r\n                <Navbar collapseOnSelect className=\"navbar-expand-sm navbar-toggleable-sm ng-white border-bottom box-shadow mb-3\" >\r\n                    <Navbar.Brand href=\"#home\">u-ProMIS</Navbar.Brand>\r\n                    <Navbar.Toggle aria-controls=\"responsive-navbar-nav\" />\r\n                    <Navbar.Collapse id=\"responsive-navbar-nav\">\r\n                        <Nav className=\"mr-auto\">\r\n                            <Nav.Item>\r\n                                <Nav.Link className=\"text-dark\" href=\"/\">Home</Nav.Link>\r\n                            </Nav.Item>\r\n                            <Nav.Item>\r\n                                <Nav.Link className=\"text-dark\" href=\"/counter\">Counter</Nav.Link>\r\n                            </Nav.Item>\r\n                            <NavDropdown title=\"Contract\" id=\"collapsable-contract-dropdown\">\r\n                                <NavDropdown.Item className=\"text-dark\" href='/contract' >\r\n                                    Contracts\r\n                                </NavDropdown.Item>\r\n                                <NavDropdown.Divider />\r\n                                <NavDropdown.Item className=\"text-dark\" href='/request' >\r\n                                    Requests\r\n                                </NavDropdown.Item>\r\n                                <NavDropdown.Item className=\"text-dark\" href='/proposal' >\r\n                                    Proposals\r\n                                </NavDropdown.Item>\r\n                            </NavDropdown>\r\n                            <NavDropdown title=\"Project\" id=\"collapsable-contract-dropdown\">\r\n                                <NavDropdown.Item className=\"text-dark\" href='/project' >\r\n                                    Projects\r\n                                </NavDropdown.Item>\r\n                                <NavDropdown.Item className=\"text-dark\" href='/workpackage' >\r\n                                    Workpackages\r\n                                </NavDropdown.Item>\r\n                                <NavDropdown.Item className=\"text-dark\" href='/activity' >\r\n                                    Activities\r\n                                </NavDropdown.Item>\r\n                                <NavDropdown.Item className=\"text-dark\" href='/event' >\r\n                                    Events\r\n                                </NavDropdown.Item>\r\n                                <NavDropdown.Item className=\"text-dark\" href='/mission' >\r\n                                    Missions\r\n                                </NavDropdown.Item>\r\n                                <NavDropdown.Divider />\r\n                            </NavDropdown>\r\n                        </Nav>\r\n                        <Nav className=\"mr-auto justify-content-center\">\r\n                            <Nav.Item>\r\n                            {!!this.props.User} ?\r\n                                <Nav.Link className=\"text-dark\" onClick={() => { alert('log out here') }} >Log Out</Nav.Link>\r\n                            :\r\n                                <Nav.Link className=\"text-dark\" onClick={() => { alert('log in here') }} >Log In</Nav.Link>\r\n\r\n                            </Nav.Item>\r\n                            <NavDropdown title=\"Help\" id=\"collapsable-contract-dropdown\">\r\n                                <NavDropdown.Item className=\"text-dark\" href='/help' >\r\n                                    Help\r\n                                </NavDropdown.Item>\r\n                                <NavDropdown.Divider />\r\n                                <NavDropdown.Item className=\"text-dark\" href='/about' >\r\n                                    About\r\n                                </NavDropdown.Item>\r\n                            </NavDropdown>\r\n                        </Nav>\r\n                    </Navbar.Collapse>\r\n                </Navbar>\r\n            </header >\r\n        );\r\n    }\r\n}\r\n","import React, { Component } from 'react';\r\nimport { Container } from 'reactstrap';\r\nimport { NavMenu } from './NavMenu';\r\nimport { RouteComponentProps } from 'react-router';\r\n\r\nexport class Layout extends React.Component<{ User: any }> {\r\n  static displayName = Layout.name;\r\n\r\n  render() {\r\n    return (\r\n      <div>\r\n        <NavMenu User={this.props.User} />\r\n        <Container className=\"container upromisContent\">\r\n          {this.props.children}\r\n        </Container>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n","import React, { Component } from 'react';\r\n\r\nexport class Home extends Component {\r\n  static displayName = Home.name;\r\n\r\n  render () {\r\n    return (\r\n      <div>\r\n        <h1>Hello, world!</h1>\r\n        <p>Welcome to your new single-page application, built with:</p>\r\n        <ul>\r\n          <li><a href='https://get.asp.net/'>ASP.NET Core</a> and <a href='https://msdn.microsoft.com/en-us/library/67ef8sbd.aspx'>C#</a> for cross-platform server-side code</li>\r\n          <li><a href='https://facebook.github.io/react/'>React</a> for client-side code</li>\r\n          <li><a href='http://getbootstrap.com/'>Bootstrap</a> for layout and styling</li>\r\n        </ul>\r\n        <p>To help you get started, we have also set up:</p>\r\n        <ul>\r\n          <li><strong>Client-side navigation</strong>. For example, click <em>Counter</em> then <em>Back</em> to return here.</li>\r\n          <li><strong>Development server integration</strong>. In development mode, the development server from <code>create-react-app</code> runs in the background automatically, so your client-side resources are dynamically built on demand and the page refreshes when you modify any file.</li>\r\n          <li><strong>Efficient production builds</strong>. In production mode, development-time features are disabled, and your <code>dotnet publish</code> configuration produces minified, efficiently bundled JavaScript files.</li>\r\n        </ul>\r\n        <p>The <code>ClientApp</code> subdirectory is a standard React application based on the <code>create-react-app</code> template. If you open a command prompt in that directory, you can run <code>npm</code> commands such as <code>npm test</code> or <code>npm install</code>.</p>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n","import React, { Component } from 'react';\r\n\r\ninterface IState\r\n{\r\n    currentCount : number;\r\n}\r\n\r\nexport class Counter extends Component<{}, IState> {\r\n  static displayName = Counter.name;\r\n\r\n  constructor (props: Readonly<{}>) {\r\n    super(props);\r\n    this.state = { currentCount: 0 };\r\n    this.incrementCounter = this.incrementCounter.bind(this);\r\n  }\r\n\r\n  incrementCounter () {\r\n    this.setState({\r\n      currentCount: this.state.currentCount + 1\r\n    });\r\n  }\r\n\r\n  render () {\r\n    return (\r\n      <div>\r\n        <h1>Counter</h1>\r\n\r\n        <p>This is a simple example of a React component.</p>\r\n\r\n        <p>Current count: <strong>{this.state.currentCount}</strong></p>\r\n\r\n        <button className=\"btn btn-primary\" onClick={this.incrementCounter}>Increment</button>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n","import * as React from \"react\";\r\n\r\nconst NotFoundPage: React.SFC = () => {\r\n    return (\r\n        <div className=\"page-container\">\r\n            <h1>Sorry, this page cannot be found</h1>\r\n        </div>\r\n    );\r\n};\r\nexport default NotFoundPage;\r\n","import React, { Component, Suspense } from 'react';\nimport { Route, Switch, RouteComponentProps } from 'react-router';\nimport { Layout } from './components/Layout';\nimport { Home } from './components/Home';\nimport { Counter } from './components/Counter';\nimport nfp from './components/NotFoundPage';\nimport * as Oidc from 'oidc-client' ;\n\ninterface IProps {\n}\n\n\ninterface IState {\n    _user: any;\n}\n\nclass App extends React.Component<IProps, IState> {\n    static displayName = App.name;\n\n    constructor(props: IProps, state: IState) {\n        super(props);\n        this.state = {\n            _user: null\n        };\n    }\n\n\n    render() {\n        const contract = React.lazy(() => import(\"./components/Contract/Contract\"));\n        const contractdetails = React.lazy(() => import(\"./components/Contract/ContractDetails\"));\n\n        const config : Oidc.UserManagerSettings = {\n            authority: \"http://localhost:5000\",\n            client_id: \"js\",\n            redirect_uri: \"http://localhost:5003/callback.html\",\n            response_type: \"code\",\n            scope: \"openid profile api1\",\n            post_logout_redirect_uri: \"http://localhost:3000/index.html\",\n        };\n        \n\n        let mgr = new Oidc.UserManager(config);  \n        mgr.getUser().then((user) => {  \n            this.setState({  \n                _user: user  \n            });  \n            console.log(user);  \n        })  \n\n        return (\n            <Layout User={this.state._user}>\n                <Suspense fallback={<div className=\"page-container\">Loading...</div>}>\n                    <Switch>\n                        <Route exact path='/' component={Home} />\n                        <Route path='/home' component={Home} />\n                        <Route path='/counter' component={Counter} />\n                        <Route path='/contract' component={contract} />\n                        <Route path='/contractdetails/:id' component={contractdetails} />\n                        <Route path='/contractdetails/add' component={contractdetails} />\n                        <Route component={nfp} />\n                    </Switch>\n                </Suspense>\n            </Layout>\n        );\n    }\n}\n\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import 'bootstrap/dist/css/bootstrap.min.css';\nimport 'font-awesome/css/font-awesome.min.css';\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport { BrowserRouter } from 'react-router-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\n//const baseUrl = document.getElementsByTagName('base')[0].getAttribute('href');\nconst rootElement = document.getElementById('root');\n\nReactDOM.render(\n  <BrowserRouter >\n    <App />\n  </BrowserRouter>,\n  rootElement);\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}