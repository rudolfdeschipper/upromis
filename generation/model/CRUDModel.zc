#Parameters
appName : "uProMIS App"
nameSpace : "upromisfrontend"
backendNameSpace : "uPromis"
msNameSpace : "uPromis.Microservice."
debug : "on"
APIDebug : true

@App

Contract <- Definitions.AppBase : 
{
	List <- Microservice.Contract.DTO.Contract,
	Edit <- Microservice.Contract.DTO.Contract,
	EditScreen <- App.Contract.Edit.Properties,
	EditTitle: "title",
	Tabs : {
		Payment <- Definitions.AppBase : {
			Title : "Payments", 
			JSONName : "payment", 
			Model <- Microservice.Contract.DTO.Contract.Children.ContractPaymentInfo 
		},
		Team <- Definitions.AppBase : {
			Title : "Team members", 
			JSONName : "team", 
			Model <- Microservice.Contract.DTO.Contract.Children.ContractTeamComposition 
		}
	},
	Actions : {
		Action1 : { Name: "copy", Title: "Copy"},
		Action2 : { Name: "close", Title: "Close"}
	},
	Attachments: true,
	AppUrl: "contract",
	APIUrl: "http://localhost:5001/api"
}

Proposal <- Definitions.AppBase : 
{
	List <- Microservice.Contract.DTO.Proposal,
	Edit <- Microservice.Contract.DTO.Proposal,
	EditScreen <- App.Proposal.Edit.Properties,
	EditTitle: "title",
	Tabs : {
		Payment <- Definitions.AppBase : {
			Title : "Payments", 
			JSONName : "payment", 
			Model <- Microservice.Contract.DTO.Proposal.Children.ProposalPaymentInfo 
		},
		Team <- Definitions.AppBase : {
			Title : "Team members", 
			JSONName : "team", 
			Model <- Microservice.Contract.DTO.Proposal.Children.ProposalTeamComposition 
		}
	},
	Actions : {
		Action1 : { Name: "copy", Title: "Copy"},
		Action2 : { Name: "close", Title: "Close"}
	},
	Attachments: true,
	AppUrl: "proposal",
	APIUrl: "http://localhost:5001/api"
}

Request <- Definitions.AppBase : 
{
	List <- Microservice.Contract.DTO.Request,
	Edit <- Microservice.Contract.DTO.Request,
	EditScreen <- App.Request.Edit.Properties : {
		-AckPlandate,
		-AckActualdate,
		-YNPlandate,
		-YNActualdate,
		-OfferPlandate,
		-OfferActualdate,
		+AckGroup : {
			Type : "Row",
			Columnns : {
				+AckPlandate <- DataDictionary.DateField :  { ColumnnWidth : "s6", Name : "AcknowledgePlandate", Title : "Planned Acknowledge date", Nullable: true, JSONName : "acknowledgePlanDate" }, 
				+AckActualdate <- DataDictionary.DateField :  { ColumnnWidth : "s6", Name : "AcknowledgeActualdate", Title : "Actual Acknowledge date", Nullable: true, JSONName : "acknowledgeActualDate", JSONDefault: "undefined" }
			}
		},
		+YnGroup : {
			Type: "Row",
			Columnns : {
				+YNPlandate <- DataDictionary.DateField :  { ColumnnWidth : "s6", Name : "YesNoPlandate", Title : "Planned Yes/No date", Nullable: true, JSONName : "ynPlanDate" }, 
				+YNActualdate <- DataDictionary.DateField :  { ColumnnWidth : "s6", Name : "YesNoActualdate", Title : "Actual Yes/No date", Nullable: true, JSONName : "ynActualDate" }
			}
		},
		OfferGroup : {
			Type : "Row",
			Columnns : {
				+OfferPlandate <- DataDictionary.DateField :  { ColumnnWidth : "s6", Name : "OfferPlandate", Title : "Planned Proposal date", Nullable: true, JSONName : "offerPlanDate" }, 
				+OfferActualdate <- DataDictionary.DateField :  { ColumnnWidth : "s6", Name : "OfferActualdate", Title : "Actual Proposal date", Nullable: true, JSONName : "offerActualDate" }
			}
		}
		/ ID, Code, Title, Description, Startdate, RequestorId, AckGroup, YnGroup, OfferGroup, RequestStatus, RequestType
	},
	EditTitle: "title",
	Tabs : {
		Team <- Definitions.AppBase : {
			Title : "Team members", 
			JSONName : "team", 
			Model <- Microservice.Contract.DTO.Request.Children.RequestTeamComposition 
		}
	},
	Actions : {
		Action1 : { Name: "copy", Title: "Copy"},
		Action2 : { Name: "close", Title: "Close"}
	},
	Attachments: true,
	AppUrl: "request",
	APIUrl: "http://localhost:5001/api"
}

Client <- Definitions.AppBase : 
{
	List <- Microservice.Contract.DTO.Client,
	Edit <- Microservice.Contract.DTO.Client,
	EditScreen <- App.Client.Edit.Properties,
	EditTitle: "title",
	Tabs : {
	},
	Actions : {
		Action1 : { Name: "copy", Title: "Copy"},
		Action2 : { Name: "close", Title: "Close"}
	},
	Attachments: false,
	AppUrl: "client",
	APIUrl: "http://localhost:5001/api"
}

Notification <- Definitions.AppBase : 
{
	List <- Microservice.Notification.DTO.NotificationEntry,
	Edit <- Microservice.Notification.DTO.NotificationEntry,
	EditScreen <- App.Notification.Edit.Properties,
	EditTitle: "code",
	Tabs : {
	},
	Actions : {
		Action1 : { Name: "copy", Title: "Copy"},
		Action2 : { Name: "close", Title: "Close"}
	},
	Attachments: false,
	AppUrl: "notification",
	APIUrl: "http://localhost:15060/api"
}

UserManager <- Definitions.AppBase : 
{
	List <- Microservice.UserManager.DTO.ApplicationUser,
	Edit <- Microservice.UserManager.DTO.ApplicationUser,
	EditScreen <- App.UserManager.Edit.Properties,
	EditTitle: "userName",
	Key: {
		Name: "id",
		Type: "string",
		DefaultValue: "''"
	},
	Tabs : {
		Roles <- Definitions.AppBase : {
			Title : "Roles", 
			JSONName : "roles", 
			Model <- Microservice.UserManager.DTO.ApplicationUser.Children.UserRole 
		}
	},
	Actions : {
		Action1 : { Name: "copy", Title: "Copy"},
		Action2 : { Name: "close", Title: "Close"}
	},
	Attachments: false,
	AppUrl: "usermanager",
	APIUrl: "http://localhost:5000/api"
}

@Microservice

Contract : {
	Namespace: "ContractAPI",
	Controllers: {
		AccountInfo : {
			Namespace: "Accountinfo",
			Export <- Microservice.Contract.DTO.AccountInfo,
			DTO <- Microservice.Contract.DTO.AccountInfo,
			ClaimInfo: { ClaimList : "Teammembers", ClaimField : "AccountInfoMemberType" },
			Model <- Microservice.Contract.Models.AccountInfo,
			ReportQueue: "ACCOUNTINFO",
			AccessControl : {
				AccessPolicy : "CanAccessAccounts",
				EditPolicy : "CanEditAccounts"
			}
		},
		Contract: {
			Namespace: "Contract",
			Export <- Microservice.Contract.DTO.Contract,
			DTO <- Microservice.Contract.DTO.Contract,
			ClaimInfo: { ClaimList : "Teammembers", ClaimField : "AccountInfoMemberType" },
			Model <- Microservice.Contract.Models.Contract,
			ReportQueue: "CONTRACT",
			AccessControl : {
				AccessPolicy : "CanAccessContracts",
				EditPolicy : "CanEditContracts"
			}
		},
		Request: {
			Namespace: "Request",
			Export <- Microservice.Contract.DTO.Request,
			DTO <- Microservice.Contract.DTO.Request,
			ClaimInfo: { ClaimList : "Teammembers", ClaimField : "AccountInfoMemberType" },
			Model <- Microservice.Contract.Models.Request,
			ReportQueue: "REQUEST",
			AccessControl : {
				AccessPolicy : "CanAccessContracts",
				EditPolicy : "CanEditContracts"
			}
		},
		Proposal: {
			Namespace: "Proposal",
			Export <- Microservice.Contract.DTO.Proposal,
			DTO <- Microservice.Contract.DTO.Proposal,
			ClaimInfo: { ClaimList : "Teammembers", ClaimField : "AccountInfoMemberType" },
			Model <- Microservice.Contract.Models.Proposal,
			ReportQueue: "PROPOSAL",
			AccessControl : {
				AccessPolicy : "CanAccessContracts",
				EditPolicy : "CanEditContracts"
			}
		},
		Client: {
			Namespace: "Client",
			Export <- Microservice.Contract.DTO.Client,
			DTO <- Microservice.Contract.DTO.Client,
			ClaimInfo: { ClaimList : "Teammembers", ClaimField : "AccountInfoMemberType" },
			Model <- Microservice.Contract.Models.Client,
			ReportQueue: "CLIENT",
			AccessControl : {
				AccessPolicy : "CanAccessAccounts",
				EditPolicy : "CanEditAccounts"
			}
		}
	},
	Models: {
		AccountInfo : {
			Name: "AccountInfo",
			SetName : "Accounts",
			Properties <- Entities.AccountInfo,
			Children : {
				AccountField  : { 
					Properties <- Entities.AccountField, 
					SetName: "AccountFields", 
					Lazy: false 
				},
				AccountTeamComposition : { 
					Properties <- Entities.AccountTeamComposition, 
					SetName: "Teammembers", 
					Lazy: false 
				},
				Contract : { 
					Properties <-Entities.Contract, 
					SetName: "Contracts", 
					Lazy: true 
				},
				Proposal : { 
					Properties <-Entities.Proposal, 
					SetName: "Proposals", 
					Lazy: true 
				},
				Request : { 
					Properties <- Entities.Request, 
					SetName: "Requests", 
					Lazy: true 
				},
				Client : { 
					Properties <- Entities.Client, 
					SetName: "Clients", 
					Lazy: true 
				}
			}
		},
		Contract : {
			Name: "Contract",
			SetName : "Contracts",
			Properties <- Entities.Contract,
			Children : {
				ContractPaymentInfo : { 
					Properties <- Entities.ContractPaymentInfo, 
					SetName: "Payments", 
					Lazy: false 
				},
				ContractTeamComposition : { 
					Properties <- Entities.ContractTeamComposition, 
					SetName: "Teammembers", 
					Lazy: false 
				}
			}
		},
		Request : {
			Name: "Request",
			SetName : "Requests",
			Properties <- Entities.Request,
			Children : {
				RequestTeamComposition : { 
					Properties <- Entities.RequestTeamComposition, 
					SetName: "Teammembers", 
					Lazy: false 
				}
			}
		},
		Proposal : {
			Name: "Proposal",
			SetName : "Proposals",
			Properties <- Entities.Proposal,
			Children : {
				ProposalPaymentInfo : { 
					Properties <- Entities.ProposalPaymentInfo, 
					SetName: "Payments", 
					Lazy: false 
				},
				ProposalTeamComposition : { 
					Properties <- Entities.ProposalTeamComposition, 
					SetName: "Teammembers", 
					Lazy: false 
				}
			}
		},
		Client : {
			Name: "Client",
			SetName : "Clients",
			Properties <- Entities.Client,
			Children : {
				
			}
		}
	},
	DTO: {
		AccountInfo <- Microservice.Contract.Models.AccountInfo : {
			Properties : {
				-ExternalID
			}
		},
		Contract <- Microservice.Contract.Models.Contract : {
			Properties : {
				-ExternalID
			},
			Children: {
				ContractPaymentInfo: {
					Properties: {
						-ExternalID
					}
				},
				ContractTeamComposition: {
					Properties: {
						-ExternalID
					}
				}
			}
		},
		Request <- Microservice.Contract.Models.Request : {
			Properties : {
				-ExternalID
			}
		},
		Proposal <- Microservice.Contract.Models.Proposal : {
			Properties : {
				-ExternalID
			},
			Children: {
				ProposalPaymentInfo: {
					Properties: {
						-ExternalID
					}
				},
				ProposalTeamComposition: {
					Properties: {
						-ExternalID
					}
				}
			}
		},
		Client <- Microservice.Contract.Models.Client : {
			Properties : {
				-ExternalID
			}
		}
	}
}

Notification : {
	Namespace: "Notification",
	Controllers: {
		Notification : {
			Namespace: "Notification",
			Export <- Microservice.Notification.DTO.NotificationEntry,
			DTO <- Microservice.Notification.DTO.NotificationEntry,
			Model <- Microservice.Notification.Models.NotificationEntry
		},
		NotificationGroup : {
			Namespace: "NotificationGroup",
			Export <- Microservice.Notification.DTO.NotificationGroup,
			DTO <- Microservice.Notification.DTO.NotificationGroup,
			Model <- Microservice.Notification.Models.NotificationGroup
		}
	},
	Models: {
		NotificationEntry : {
			Name: "NotificationEntry",
			SetName : "NotificationEntries",
			Properties <- Entities.NotificationEntry,
			Children : {
				
			}
		},
		NotificationGroup : {
			Name: "NotificationGroup",
			SetName : "NotificationGroups",
			Properties <- Entities.NotificationGroup,
			Children : {
				
			}
		}
	},
	DTO : {
		NotificationEntry <- Microservice.Notification.Models.NotificationEntry,
		NotificationGroup <- Microservice.Notification.Models.NotificationGroup
	}
}

UserManager : {
	Namespace: "Identityserver",
	Controllers: {
	},
	Models: {
	},
	DTO : {
		ApplicationUser : {
			Name: "ApplicationUser",
			SetName : "ApplicationUsers",
			Properties <- Entities.User,
			Children : {
				UserRole : { 
					Properties <- Entities.UserRole, 
					SetName: "Roles", 
					Lazy: false 
				}
			}
		}
	}

}

@Entities // non-structured flat objects

AccountInfo <- Definitions.DefaultMainObject : {

}

AccountField <- Definitions.DefaultObject : {
	+Name <- DataDictionary.DescriptionField,
	+Value <- DataDictionary.DescriptionField : { Length: 100 }
}

AccountTeamComposition <- Definitions.DefaultObject : {
	+TeamMember <- DataDictionary.GuidField : { Title: "Team member", Nullable: false },
	+AccountInfoMemberType <- DataDictionary.TeamMemberTypeField
}

Contract <- Definitions.DefaultTimeboundObject : {
	+Value <- DataDictionary.AmountField : { Name : "Value", Title : "Value", JSONName : "value" },
	+Budget <- DataDictionary.AmountField : { Name : "Budget", Title : "Budget", JSONName : "budget", Show: false },
	+ExpenseBudget <- DataDictionary.AmountField : { Name : "ExpenseBudget", Title : "Expense Budget", JSONName : "expenseBudget", Show: false },
	+ContractStatus <- DataDictionary.StatusField : {
		+Values : {
			Planned : "1 - Planned",
			Open : "2 - Open",
			Closed : "3 - Closed",
			Cancelled : "9 - Cancelled"
		}, 
		JSONName : "contractStatus",
		Title: "Status",
		Nullable: false
	},
	+ContractType <- DataDictionary.StatusField : {
		+Values : {
			FrameContract: "0 - Frame Contract",
			FixedPrice : "1 - Fixed Price",
			TandM : "2 - Time & Means",
			TandMExt : "3 - Time & Means Extension",
			QTM : "4 - Quoted Time & Means",
			QTMExt : "5 - Quoted Time & Means Extension",
			TaskOrder: "6 - Predefined task order"
		}, 
		JSONName : "contractType",
		Title: "Contract type",
		Nullable: false
	},
	+ProposalId <- DataDictionary.ReferenceField : {
		ReferenceType : "Proposal",
		ReferenceSet : "Proposals",
		ReferenceObjectName: "Proposal",
		-ReferenceDBContext,
		Title : "Proposal",
		Type : "int",
		JSONName : "proposal",
		Nullable: true,
		Show: false
	},
	+ParentContractId <- DataDictionary.ReferenceField : {
		ReferenceType : "Contract",
		ReferenceSet : "Contracts",
		ReferenceObjectName: "ParentContract",
		-ReferenceDBContext,
		Title : "Parent contract",
		Type : "int",
		JSONName : "parentContract",
		Nullable: true,
		Show: false
	},
	+ClientId <- DataDictionary.ReferenceField : {
		ReferenceType : "Client",
		ReferenceSet : "Clients",
		ReferenceObjectName: "Client",
		-ReferenceDBContext,
		Title : "Client",
		Type : "int",
		JSONName : "client",
		Nullable: true,
		Show: false
	},
	+MainContact <- DataDictionary.DescriptionField : { Name: "MainContact", Title: "Main Contact", JSONName: "mainContact",Nullable: false, Length: 100, Show: true },
	+Phone <- DataDictionary.PhoneField : { Nullable: false, Show: true },
	+ContactMail <- DataDictionary.EmailField : { Name: "ContactMail", Title: "Contact Email", JSONName: "contactMail", Nullable: false, Show: false }
	/ ID, Code, Title, Description, ContractType, ContractStatus, Startdate, Enddate, Value, Budget, ExpenseBudget 
}

ContractPaymentInfo <- Definitions.DefaultObject: {
    +Description <- DataDictionary.DescriptionField,
    +PlannedInvoiceDate <- DataDictionary.DateField: {JSONName: "plannedInvoiceDate", Title: "Planned Invoice date"},
    +ActualInvoiceDate <- DataDictionary.DateField: {JSONName: "actualInvoiceDate", Title: "Actual Invoice date"},
    +Amount <- DataDictionary.AmountField
}

ContractTeamComposition <- Definitions.DefaultObject : {
	+TeamMember <- DataDictionary.GuidField : { Name: "TeammemberID", Title: "Team member", JSONName: "teammemberID", Nullable: false },
	+ContractMemberType <- DataDictionary.TeamMemberTypeField
}

Proposal <- Definitions.DefaultTimeboundObject : {
	+ProposalStatus <- DataDictionary.StatusField : {
		+Values : {
			Planned : "1 - Planned",
			Open : "2 - Open",
			Closed : "3 - Closed",
			Cancelled : "9 - Cancelled"
		}, 
		JSONName : "proposalStatus",
		Title: "Status",
		Nullable: false
	},
	+ProposalType <- DataDictionary.StatusField : {
		+Values : {
			FrameContract: "0 - Frame Contract",
			FixedPrice : "1 - Fixed Price",
			TandM : "2 - Time & Means",
			TandMExt : "3 - Time & Means Extension",
			QTM : "4 - Quoted Time & Means",
			QTMExt : "5 - Quoted Time & Means Extension",
			TaskOrder: "6 - Predefined task order"
		}, 
		JSONName : "proposalType",
		Title: "Proposal type",
		Nullable: false
	}

}

ProposalPaymentInfo <- Definitions.DefaultObject : {
    +Description <- DataDictionary.DescriptionField,
    +PlannedInvoiceDate <- DataDictionary.DateField: {JSONName: "plannedInvoiceDate", Title: "Planned Invoice date"},
    +Amount <- DataDictionary.AmountField
}

ProposalTeamComposition <- Definitions.DefaultObject : {
	+TeamMember <- DataDictionary.GuidField : { Name: "TeammemberID", Title: "Team member", JSONName: "teammemberID", Nullable: false },
	+ProposalMemberType <- DataDictionary.TeamMemberTypeField
}

Request <- Definitions.DefaultTimeboundObject : {
	Startdate <- DataDictionary.DateField :  { Name : "ReceivedDate", Title : "Date received", JSONName : "receivedDate", Nullable: false }, 
	+RequestorId <- DataDictionary.ReferenceField : {
		ReferenceType : "Client",
		ReferenceSet : "Clients",
		ReferenceObjectName: "Requestor",
		-ReferenceDBContext,
		Title : "Requestor",
		Type : "int",
		JSONName : "requestor",
		Nullable: false,
		Show: false
	},
	-Enddate, 
	+AckPlandate <- DataDictionary.DateField :  { Name : "AcknowledgePlandate", Title : "Planned Acknowledge date", Nullable: true, JSONName : "acknowledgePlanDate" }, 
	+AckActualdate <- DataDictionary.DateField :  { Name : "AcknowledgeActualdate", Title : "Actual Acknowledge date", Nullable: true, JSONName : "acknowledgeActualDate", JSONDefault: "undefined" }, 
	+YNPlandate <- DataDictionary.DateField :  { Name : "YesNoPlandate", Title : "Planned Yes/No date", Nullable: true, JSONName : "ynPlanDate" }, 
	+YNActualdate <- DataDictionary.DateField :  { Name : "YesNoActualdate", Title : "Actual Yes/No date", Nullable: true, JSONName : "ynActualDate" }, 
	+OfferPlandate <- DataDictionary.DateField :  { Name : "OfferPlandate", Title : "Planned Proposal date", Nullable: true, JSONName : "offerPlanDate" }, 
	+OfferActualdate <- DataDictionary.DateField :  { Name : "OfferActualdate", Title : "Actual Proposal date", Nullable: true, JSONName : "offerActualDate" }, 
	+RequestStatus <- DataDictionary.StatusField : {
		+Values : {
			Planned : "1 - Planned",
			Open : "2 - Open",
			Closed : "3 - Closed",
			Cancelled : "9 - Cancelled"
		}, 
		JSONName : "requestStatus",
		Title: "Status",
		Nullable: false
	},
	+RequestType <- DataDictionary.StatusField : {
		+Values : {
			FrameContract: "0 - Frame Contract",
			FixedPrice : "1 - Fixed Price",
			TandM : "2 - Time & Means",
			TandMExt : "3 - Time & Means Extension",
			QTM : "4 - Quoted Time & Means",
			QTMExt : "5 - Quoted Time & Means Extension",
			TaskOrder: "6 - Predefined task order"
		}, 
		JSONName : "requestType",
		Title: "Request type",
		Nullable: false
	}
}

RequestTeamComposition <- Definitions.DefaultObject : {
	+TeamMember <- DataDictionary.GuidField : { Name: "TeammemberID", Title: "Team member", JSONName: "teammemberID", Nullable: false },
	+RequestMemberType <- DataDictionary.TeamMemberTypeField
}

Client <- Definitions.DefaultMainObject : {
	+Address <- DataDictionary.DescriptionField : { Name: "Address", Title: "Address", JSONName: "address",Nullable: true, Show: false },
	+MainContact <- DataDictionary.DescriptionField : { Name: "MainContact", Title: "Main Contact", JSONName: "mainContact",Nullable: false, Length: 100, Show: true },
	+Phone <- DataDictionary.DescriptionField : { Name: "Phone", Title: "Phone", JSONName: "phone",Nullable: false, Length: 15, Show: true },
	+ContactMail <- DataDictionary.DescriptionField : { Name: "ContactMail", Title: "Contact Email", JSONName: "contactMail",Nullable: false, Length: 100, Show: false }
}

NotificationEntry : {
	ID <- DataDictionary.IDField,
	ExternalID <- DataDictionary.GuidField,
	URL <- DataDictionary.DescriptionField :
	{
		Name: "URL",
		JSONName: "url",
		Title: "URL",
		Nullable: false,
		Length: 255,
		Show: true
	},
	Code <- DataDictionary.CodeField,
	Description <- DataDictionary.DescriptionField,
	NotificationType <- DataDictionary.StatusField : { 
		Name: "NotificationType",
		JSONName: "notificationType",
		Title: "Notification Type",
		Nullable: false,
		+Values: {
			ContractNotification: "Contract",
			ProjectNotification: "Project",
			ReminderNotification: "Reminder"
		}
	},
	NotificationSubtype <- DataDictionary.CodeField : {
		Length: 50,
		Nullable: true,
		Name: "NotificationSubtype",
		Title: "Notification Subtype",
		JSONName: "notificationSubtype",
		Show: true
	}, 
	ExpectedAction <- DataDictionary.DescriptionField : 
	{ 
			Name: "ExpectedAction", 
			Title: "Expected action", 
			JSONName: "expectedAction", 
			Length: 255, 
			Nullable: false, 
			Show: true 
	},
	SubscriptionGroup <- DataDictionary.CodeField : {
		Length: 50,
		Nullable: true,
		Name: "SubscriptionGroup",
		Title: "Subscription Group",
		JSONName: "subscriptionGroup",
		Show: true
	}, 
	SubscriptionID <- DataDictionary.DescriptionField : 
	{ 
		Name: "SubscriptionID", 
		Title: "Subscription ID", 
		JSONName: "subscriptionID", 
		Nullable: true,
		Length: 100, 
		Show: true
	},
	Salutation <- DataDictionary.CodeField : {
		Length: 20,
		Nullable: true,
		Name: "Salutation",
		Title: "Salutation",
		JSONName: "salutation",
		Show: true
	},
	Startdate <- DataDictionary.DateField : {
		Nullable: true,
		Name: "Startdate",
		JSONName: "startdate",
		Show: false,
		Title: "Start date"
	},
	Enddate <- DataDictionary.DateField : {
		Nullable: true,
		Name: "Enddate",
		JSONName: "enddate",
		Show: false,
		Title: "End date"
	},
	Duedate <- DataDictionary.DateField : {
		Nullable: false,
		Name: "Duedate",
		JSONName: "Duedate",
		Show: true,
		Title: "Due date"
	}
}

NotificationGroup : {
	ID <- DataDictionary.IDField,
	SubscriptionGroup <- DataDictionary.CodeField : {
		Length: 50,
		Nullable: true,
		Name: "SubscriptionGroup",
		Title: "Subscription Group",
		JSONName: "subscriptionGroup",
		Show: true
	}, 
	NotificationType <- DataDictionary.StatusField : { 
		Name: "NotificationType",
		JSONName: "notificationType",
		Title: "Notification Type",
		Nullable: false,
		+Values: {
			ContractNotification: "Contract",
			ProjectNotification: "Project",
			ReminderNotification: "Reminder"
		}
	},
	SubscriptionID <- DataDictionary.DescriptionField : 
	{ 
		Name: "SubscriptionID", 
		Title: "Subscription ID", 
		JSONName: "subscriptionID", 
		Nullable: false, 
		Length: 100, 
		Show: true
	},
	Salutation <- DataDictionary.CodeField : {
		Length: 20,
		Nullable: false,
		Name: "Salutation",
		Title: "Salutation",
		JSONName: "salutation",
		Show: true
	}
}

User : {
		Id <- DataDictionary.CodeField : {
			Name: "Id",
			JSONName: "id",
			Nullable: false,
			Title: "User ID",
			Length: 450,
			Show: false
		},
		UserName <- DataDictionary.CodeField : {
			Name: "UserName",
			JSONName: "userName",
			Length: 255,
			Nullable: false,
			Title: "Username",
			Show: true
		},
		Email <- DataDictionary.EmailField : {
			Name: "Email",
			JSONName: "email",
			Length: 255,
			Nullable: false,
			Title: "E-Mail",
			Show: true
		},
		FirstName <- DataDictionary.CodeField : {
			Name: "FirstName",
			JSONName: "firstName",
			Length: 255,
			Nullable: false,
			Title: "First name",
			Show: true
		},
		LastName <- DataDictionary.CodeField : {
			Name: "LastName",
			JSONName: "lastName",
			Length: 255,
			Nullable: false,
			Title: "Last name",
			Show: true
		}
}

UserRole : {
	ID <- DataDictionary.IDField,
	Role <- DataDictionary.StatusField : {
		Name: "UserRole",
		JSONName: "userRole",
		Title: "Role",
		Nullable: false,
		+Values: {
			IsContractOwner: "Contract Owner",
			IsContractParticipant: "Contract Participant",
			IsContractReader: "Contract Reader",
			IsProjectOwner: "Project Owner",
			IsProjectParticipant: "Project Participant",
			IsProjectReader: "Project Reader",
			IsInAdminRole: "uPromis Administrator"
		}
	}
}

@Definitions

AppBase : {
	Key: {
		Name: "id",
		Type: "number",
		DefaultValue: 0
	}
}

DefaultObject :{
	ID <- DataDictionary.IDField,
	ExternalID <- DataDictionary.GuidField
}

DefaultMainObject <- Definitions.DefaultObject: {
	+Code <- DataDictionary.CodeField,
	+Title <- DataDictionary.DescriptionField : { Name: "Title", Title: "Title", JSONName: "title", Length: 100, Nullable: false, Show: true },
	+Description <- DataDictionary.DescriptionField
}

DefaultTimeboundObject <- Definitions.DefaultMainObject : {
	+Startdate <- DataDictionary.DateField :  { Name : "Startdate", Title : "Start date", JSONName : "startDate" }, 
	+Enddate <- DataDictionary.DateField : { Name : "Enddate", Title : "End date", JSONName : "endDate" }
}

// Include some basic definitions

@DataDictionary
IDField : {
	Type:"int", 
	JSONType: "number",
	YupType: "number",
	JSONDefault: "0",
	Name:"ID",
	JSONName: "id", 
	Title:"ID",
	UIControl: "Input name='[JSONName]' label='[Title]' disabled",
	UIROControl: "Input name='[JSONName]' label='[Title]' disabled",
	Nullable:false,
	Show:false,
	Key: true
}

CodeField : {
	Type:"string", 
	JSONType: "string",
	YupType: "string",
	JSONDefault: "''",
	Name:"Code", 
	JSONName: "code", 
	Title:"Code", 
	UIControl: "Input name='[JSONName]' label='[Title]' ",
	UIROControl: "Input name='[JSONName]' label='[Title]' disabled",
	Length:50, 
	Nullable:false,
	Show:true,
	Lookup: false
}

EmailField <- DataDictionary.CodeField : {
	Name : "Email",
	JSONName : "email",
	Title : "Email",
	+Validation : "EmailAddress"
}

PhoneField <- DataDictionary.CodeField : {
	Name : "Phone",
	JSONName : "phone",
	Title : "Phone number",
	+Validation : "Phone"
}

DescriptionField : {
	Type:"string", 
	JSONType: "string",
	YupType: "string",
	JSONDefault: "''",
	Name:"Description", 
	Title:"Description", 
	JSONName: "description", 
	UIControl: "Textarea name='[JSONName]' label='[Title]' ",
	UIROControl: "Textarea name='[JSONName]' label='[Title]' disbabled ",
	Length : "unlimited", 
	Nullable:true,
	Show:false
}

DateField : {
	Type:"DateTime", 
	JSONType: "Date",
	YupType: "date",
	JSONDefault: "new Date()",
	Default: "DateTime.Now",
	Name:"Date", 
	JSONName: "date", 
	Title:"Date", 
	UIControl: "DatePicker name='[JSONName]' label='[Title]' ",
	UIROControl: "DatePicker name='[JSONName]' label='[Title]' disabled ",
	Format : "MM/DD/YYYY",
	Nullable:true,
	Show:true
}

DateTimeField : {
	Type:"datetime", 
	JSONType: "Date",
	YupType: "date",
	JSONDefault: "new Date()",
	Default: "DateTime.Now",
	Name:"DateTime", 
	JSONName: "datetime", 
	Title:"Date/Time", 
	UIControl: "DatePicker name='[JSONName]' label='[Title]' ",
	UIROControl: "DatePicker name='[JSONName]' label='[Title]' disabled ",
	Format : "MM/DD/YYYY hh:mm",
	Nullable:true,
	Show:true
}

DateRange : {
	Type:"daterange", 
	JSONType: "Date",
	YupType: "date",
	JSONDefault: "new Date()",
	Default: "DateTime.Now",
	Name:"DateRange", 
	JSONName: "datetime", 
	Title:"Date/Time", 
	UIControl: "div className='w3-cell-row'> <div className='w3-cell'> <DatePicker name='[Fromdate]' label='[Title]'  /> </div> <div className='w3-cell'><DatePicker name='[Todate]'  /></div></div>",
	UIROControl: "div className='w3-cell-row'> <div className='w3-cell'> <DatePicker name='[Fromdate]' label='[Title]' disabled /> </div> <div className='w3-cell'><DatePicker name='[Todate]' disabled /></div></div>",
	Format : "MM/DD/YYYY",
	Nullable:true,
	Show:true
}

StatusField <- DataDictionary.CodeField : {
	Type: "string",
	JSONType: "string",
	YupType: "string",
	JSONDefault: "''",
	Name:"Status", 
	JSONName: "status", 
	Title:"Status", 
	UIControl: "Select name='[JSONName]' label='[Title]' options={this.props.[JSONName]values}",
	UIROControl: "Input name='[JSONName]Label' label='[Title]' disabled ",
	Nullable : true,
	Show:true,
	Lookup: true
}

ReferenceField <- DataDictionary.StatusField : {
	Reference : true,
	ReferenceSet : "referenced table set",
	ReferenctType : "",
	ReferenceObjectName: "",
	ReferenceDBContext : "if different from the normale one",
	ReferenceID : "ID",
	ReferenceTitle : "Title",
	Type: "int",
	JSONType: "number",
	YupType: "number",
	JSONDefault: "0",
	-Length
}

AmountField : {
	Type:"double", 
	JSONType: "number",
	YupType: "number",
	JSONDefault: "0.0",
	Name:"Amount", 
	JSONName: "amount", 
	Title:"Amount",
	UIControl: "Input name='[JSONName]' label='[Title]' type='number' step='0.01'",
	UIROControl: "Input name='[JSONName]' label='[Title]' type='number' step='0.01' disabled ",
	Nullable:true,
	Show:true
}

GuidField : {
	Type:"Guid", 
	JSONType: "string",
	YupType: "string",
	JSONDefault: "''",
	Default: "Guid.NewGuid()",
	Name:"ExternalID", 
	JSONName: "externalId", 
	Title:"External ID",
	UIControl: "Input name='[JSONName]' label='[Title]' disabled",
	UIROControl: "Input name='[JSONName]' label='[Title]' disabled",
	Nullable:false,
	Show:false
}

TeamMemberTypeField : {
	Type:"string", 
	JSONType: "string",
	YupType: "string",
	JSONDefault: "'Reader'",
	Name:"MemberType", 
	JSONName: "memberType", 
	Title:"Member Type",
	UIControl: "Select name='[JSONName]' label='[Title]' options={this.props.[JSONName]values}",
	UIROControl: "Input name='[JSONName]' label='[Title]' disabled ",
	Nullable:false,
	Show:true,
	Lookup: true,
Values : {
			Owner : "Owner",
			Administrator : "Administrator",
			Member : "Member",
			Participant: "Participant",
			Reader: "Reader"
	}
}
