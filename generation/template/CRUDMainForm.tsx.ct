%FileOverwrite:components\=<App.$>\generated\=<App.$>Form.tsx
/*
**             ------ IMPORTANT ------
** This file was generated by ZeroCode2 on =<DateStamp>
** DO NOT MODIFY IT, as it can be regenerated at any moment.
** If you need this file changed, change the underlying model or its template.
*/

import React from 'react';
import { Formik } from 'formik';
import * as Yup from 'yup';
import { Form, DatePicker, SubmitBtn, Input, Textarea, Select } from 'react-formik-ui'
import { ISelectValue } from '../../GeneralTypes';

import { I=<App.$>Data } from './=<App.$>Types';
import { =<App.$>Validator } from '../=<App.$>Validator';

interface IProps {
    currentData: I=<App.$>Data,
%Loop:App.Edit.Properties
%If:Lookup?=true
    =<JSONName>values : ISelectValue[], 
%EndIf
%/Loop:App.Edit.Properties
    buttonText: string;
    saveAction: (subaction: string, record: I=<App.$>Data) => void
}

interface IState {
    isSubmitting: boolean;
}

class =<App.$>Form extends React.Component<IProps, IState> {

    constructor(props: Readonly<IProps>) {
        super(props);
        this.state = { isSubmitting: false };
    }

    render() {
        return (
            <Formik
                initialValues={this.props.currentData as any}
                validate={=<App.$>Validator.Validate}
                enableReinitialize={true}
                validationSchema={Yup.object({
%Loop:App.Edit.Properties
                    =<JSONName>: Yup.=<YupType>()
%If:Length?!=unlimited
                        .max(=<Length>, 'Must be =<Length> characters or less')
%EndIf
%If:Nullable?=false
                        .required('Required')
%Else
                        .nullable()
%EndIf
%If:Validation?=EmailAddress
                        .email()
%EndIf
%If:Validation?=Phone
                        .matches(/^(\+\s?)?((?<!\+.*)\(\+?\d+([\s\-\.]?\d+)?\)|\d+)([\s\-\.]?(\(\d+([\s\-\.]?\d+)?\)|\d+))*(\s?(x|ext\.?)\s?\d+)?$/, 'Must be a valid phone number')
%EndIf
%If:Values?
                        .oneOf([
%Loop:Values
                        '=<Values.$>',
%/Loop:Values
                        ])
%EndIf
%If:HasMore
                    ,
%EndIf
%/Loop:App.Edit.Properties
                })}
                onSubmit={(values, { setSubmitting }) => {
                    this.props.saveAction("", values);
                    setSubmitting(false);
                }}
            >
                <Form styling="theme">
%Loop:App.EditScreen
%If:Type?=Row
                <div className="w3-row-padding">
%Loop:Columnns
                    <div className="w3-col =<ColumnnWidth>">
                        <=<UIControl> />
                    </div>
%/Loop:Columnns
                </div>
%Else
                <=<UIControl> />
%EndIf
%/Loop:App.EditScreen
                    <hr />
                    <SubmitBtn className="w3-button w3-light-grey w3-round" title={this.props.buttonText + "s this record"} disabled={this.state.isSubmitting}>
                        <i className="fa fa-save" ></i>&nbsp;{this.props.buttonText}
                    </SubmitBtn>
                </Form>
            </Formik>
        );
    }
};
export default =<App.$>Form;

%/File
