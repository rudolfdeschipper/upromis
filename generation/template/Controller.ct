%Loop:Controllers
%FileOverwrite:=<#Parameters.msNameSpace>=<Microservice.Namespace>\Controllers\generated\=<$>Controller.cs
%Log:Microservice Controller =<$>
/*
**             ------ IMPORTANT ------
** This file was generated by ZeroCode2 on =<DateStamp>
** DO NOT MODIFY IT, as it can be regenerated at any moment.
** If you need this file changed, change the underlying model or its template.
*/
using System;
using System.Collections.Generic;
using System.Linq;
using Microsoft.AspNetCore.Mvc;
using OfficeOpenXml;
using System.Linq.Dynamic.Core;
using =<#Parameters.msNameSpace>=<Microservice.Namespace>.Models;
using Microsoft.Extensions.Logging;
using =<#Parameters.backendNameSpace>.APIUtils;
using =<#Parameters.backendNameSpace>.APIUtils.APIMessaging;
using Microsoft.AspNetCore.Authorization;
using System.Threading.Tasks;
using Microsoft.EntityFrameworkCore;
using MassTransit;
using uPromis.Services.Models;

namespace =<#Parameters.msNameSpace>=<Microservice.Namespace>.Controllers
{
    [Route("api/[controller]")]
    [ApiController]
%If:AccessControl?
    [Authorize(policy:"=<AccessControl.AccessPolicy>")]
%Else
    [Authorize]
%EndIf
    public class =<$>Controller : ControllerBase
    {
        private readonly I=<Model.Name>Repository Repository;
        private readonly ILogger Logger;
        private readonly Business.I=<Model.Name>BusinessRules BusinessRules;
        private readonly IBus ReportServerBus;

        public =<$>Controller(I=<Model.Name>Repository repo, ILoggerProvider loggerProvider,
            Business.I=<Model.Name>BusinessRules businessRules, IBus reportServerBus)
        {
            Repository = repo;
            Logger = loggerProvider.CreateLogger(nameof(=<$>Controller));
            BusinessRules = businessRules;
            ReportServerBus = reportServerBus;
        }

        [HttpGet("{id}")]
        public async Task<ActionResult> Get(int id)
        {
            var res = await Repository.Get(id);

            if (res == null)
            {
                return NotFound(new APIResult<=<Model.Name>DTO, int>() { ID = id, DataSubject = null, Message = "Get failed" });
            }

            var record = Transformers.Transform(res, new =<Model.Name>DTO() { Modifier = "Unchanged" });

            return Ok(new APIResult<=<Model.Name>DTO, int>() { ID = id, DataSubject = record, Message = "Get was performed" });
        }

%If:AccessControl?
        [Authorize(policy:"=<AccessControl.EditPolicy>")]
%EndIf
        [HttpPost()]
        public async Task<ActionResult> Post([FromBody] SaveMessage<=<Model.Name>DTO, int> rec)
        {
            =<Model.Name>DTO res;

            Logger.Log(LogLevel.Information, rec.Action + "/" + rec.SubAction);

            try
            {
                =<Model.Name> record = Transformers.Transform(rec.DataSubject, new =<Model.Name>()) as =<Model.Name>;

                BusinessRules.ApplyBusinessRules(record, rec.DataSubject, User);

                if (BusinessRules.HasErrors())
                {
                    return UnprocessableEntity(new APIResult<=<Model.Name>DTO, int>() { ID = 0, DataSubject = null, Message = "Validation failed", AdditionalInfo = BusinessRules.Result.ToArray() });
                }
                record = await Repository.Post(record);
                res = Transformers.Transform(record, new =<Model.Name>DTO());

%If:ReportQueue?
                Uri uri = new("rabbitmq://localhost/" + uPromis.Services.Queues.MessageBusQueueNames.REPORTSERVERSAVE=<ReportQueue>);
                var endPoint = await ReportServerBus.GetSendEndpoint(uri);
                await endPoint.Send<=<Model.Name>DTO>(res);
%EndIf
            }
            catch (Exception ex)
            {
                return this.BadRequest(new APIResult<=<Model.Name>DTO, int>() { ID = 0, DataSubject = null, Message = ex.Message });
            }

            // return posted values
            return Ok(new APIResult<=<Model.Name>DTO, int>() { ID = res.ID, DataSubject = res, Message = "New =<$> was created.", AdditionalInfo = BusinessRules.Result.ToArray() });
        }

%If:AccessControl?
        [Authorize(policy:"=<AccessControl.EditPolicy>")]
%EndIf
        [HttpPut()]
        public async Task<ActionResult> Put([FromBody] SaveMessage<=<Model.Name>DTO, int> rec)
        {
            =<Model.Name>DTO res;

            Logger.Log(LogLevel.Information, rec.Action + "/" + rec.SubAction);

            try
            {
                =<Model.Name> originalRecord = await Repository.Get(rec.ID);

                if (originalRecord == null)
                {
                    return NotFound(new APIResult<=<Model.Name>DTO, int>() { ID = rec.ID, DataSubject = null, Message = "Put failed - record is not found" });
                }

                =<Model.Name> record = Transformers.Transform(rec.DataSubject, originalRecord) as =<Model.Name>;

                BusinessRules.ApplyBusinessRules(record, rec.DataSubject, User);

                if (BusinessRules.HasErrors())
                {
                    return UnprocessableEntity(new APIResult<=<Model.Name>DTO, int>() { ID = 0, DataSubject = null, Message = "Validation failed", AdditionalInfo = BusinessRules.Result.ToArray() });
                }

                record = await Repository.Put(record);

                res = Transformers.Transform(record, new =<Model.Name>DTO());

%If:ReportQueue?
                Uri uri = new("rabbitmq://localhost/" + uPromis.Services.Queues.MessageBusQueueNames.REPORTSERVERSAVE=<ReportQueue>);
                var endPoint = await ReportServerBus.GetSendEndpoint(uri);
                await endPoint.Send<=<Model.Name>DTO>(res);
%EndIf
            }
            catch (Exception ex)
            {
                return this.BadRequest(new APIResult<=<Model.Name>DTO, int>() { ID = 0, DataSubject = null, Message = ex.Message });
            }

            // return posted values
            return Ok(new APIResult<=<Model.Name>DTO, int>() { ID = res.ID, DataSubject = res, Message = "=<$> was saved.", AdditionalInfo = BusinessRules.Result.ToArray() });
        }

%If:AccessControl?
        [Authorize(policy:"=<AccessControl.EditPolicy>")]
%EndIf
        [HttpDelete()]
        public async Task<ActionResult> Delete([FromBody] SaveMessage<=<Model.Name>DTO, int> rec)
        {
            bool res;

            Logger.Log(LogLevel.Information, rec.Action + "/" + rec.SubAction);

            try
            {
                =<Model.Name> record = Transformers.Transform(rec.DataSubject, new =<Model.Name>()) as =<Model.Name>;

                res = await Repository.Delete(record);

                if (res == false)
                {
                    return NotFound(new APIResult<=<Model.Name>DTO, int>() { ID = rec.ID, DataSubject = null, Message = "Delete failed - record not found" });
                }

%If:ReportQueue?
                Uri uri = new("rabbitmq://localhost/" + uPromis.Services.Queues.MessageBusQueueNames.REPORTSERVERDELETE=<ReportQueue>);
                var endPoint = await ReportServerBus.GetSendEndpoint(uri);
                await endPoint.Send<=<$>DTO>(rec.DataSubject);
%EndIf
            }
            catch (Exception ex)
            {
                return this.BadRequest(new APIResult<=<Model.Name>DTO, int>() { ID = 0, DataSubject = null, Message = ex.Message });
            }

            // return 
            return Ok(new APIResult<=<Model.Name>DTO, int>() { ID = rec.ID, DataSubject = null, Message = "=<$> was deleted." });
        }

        // TODO: transform into a get with a body (this is possible)
        [HttpPost("getlist")]
        public async Task<ActionResult> GetList([FromBody] SortAndFilterInformation sentModel)
        {
            var records = await Repository.FilteredAndSortedList(sentModel, true);

            var recordsDTO = records.Item1.Select(c => Transformers.Transform(c, new =<Model.Name>DTO() { Modifier = "Unchanged" }));

            return Ok(new LoadResult<=<Model.Name>DTO>() { Data = recordsDTO.ToArray(), Pages = records.Item2, Message = "" });
        }

        // TODO: this can be a normal "get", with a filter on the header " 'Content-Type': 'application/excel' or something
        [HttpPost("getforexport")]
        public async Task<IActionResult> GetForExport([FromBody] SortAndFilterInformation sentModel)
        {
            using ExcelPackage package = new();
            ExcelWorksheet worksheet = package.Workbook.Worksheets.Add("=<$> List");
            //Add the headers
            int col = 0;
            int row = 1;
%Loop:Export.Properties
            col++;
            worksheet.Cells[row, col].Value = "=<Title>";
%/Loop:Export.Properties
            worksheet.Cells[1, 1, 1, col].Style.Font.Bold = true;

            var records = (await Repository.FilteredAndSortedList(sentModel, true)).Item1;

            foreach (var item in records)
            {
                row++;
                col = 1;
%Loop:Export.Properties
                worksheet.Cells[row, col].Value = item.=<$>;
%If:Format?
                worksheet.Cells[row, col].Style.Numberformat.Format = "=<Format>";
%EndIf
                col++;
%/Loop:Export.Properties
            }

            System.IO.MemoryStream fs = new();
            await package.SaveAsAsync(fs);

            return File(fs.ToArray(), "application/vnd.openxmlformats-officedocument.spreadsheetml.sheet");
        }

        // TODO: make into a get with a body
        [Route("getselectvalues")]
        [HttpPost]
        public async Task<ActionResult> GetSelectValues([FromBody] ListValueInfo info)
        {
            //var EnumProducer = new SelectValueFromEnumProducer();
            List<ListValue> list = new();

            switch (info.ValueType)
            {
%Loop:Model.Properties
%If:Lookup?=true
%If:Reference?=true
                case "=<$>Reference" :
                    // provide empty value in the dropdown:
                    list.Add(new ListValue() { Value = 0, Label = "" });

                    list.AddRange(await this.Repository.Get=<$>Reference());
                    break;
%Else
                case "=<$>" :
                    // provide empty value in the dropdown:
                    list.Add(new ListValue() { Value = string.Empty, Label = "" });

                     list.AddRange( Models.=<Controllers.Model.Name>.=<$>Values);
                    break;
%EndIf
%EndIf
%/Loop:Model.Properties
%If:Model.Children?
%Loop:Model.Children
%Loop:Properties
%If:Lookup?=true
%If:Reference?=true
                case "=<Model.Children.SetName>.=<$>Reference" :
                    // provide empty value in the dropdown:
                    list.Add(new ListValue() { Value = 0, Label = "" });

                    list.AddRange(await this.Repository.Get=<$>Reference());
                    break;
%Else
                case "=<Model.Children.SetName>.=<$>" :
                    // provide empty value in the dropdown:
                    list.Add(new ListValue() { Value = string.Empty, Label = "" });

                     list.AddRange( Models.=<Model.Children.$>.=<$>Values);
                    break;
%EndIf
%EndIf
%/Loop:Properties
%/Loop:Model.Children
%EndIf
                default:
                    break;
            }
            return Ok(new ListValues() { ValueType = info.ValueType, data = list });
        }
%If:ClaimInfo?
/*
        [HttpGet("getclaims/{UserID}")]
        [Authorize()]
        public async Task<IActionResult> GetClaims(string UserID)
        {
            var claims = Repository.List.Select(c => Transformers.Transform(c, new =<Model.Name>DTO() { Modifier = "Unchanged" }))
                .Where(c => c.=<ClaimInfo.ClaimList>.Any(t => t.TeamMember.ToString().Equals(UserID)))
                .Select(c => new { 
                    Key = "=<$>|" + c.ID, 
                    Value = c.=<ClaimInfo.ClaimList>
                        .First(t => t.TeamMember.ToString().Equals(UserID)).=<ClaimInfo.ClaimField>.ToString() 
                });
            return new JsonResult(await claims.ToArrayAsync());
        }
*/
%EndIf
    }
}
%/File

%FileOverwrite:=<#Parameters.msNameSpace>=<Microservice.Namespace>\Business\generated\I=<Model.Name>BusinessRules.cs
%Log:Business Rule classes for =<$>
/*
**             ------ IMPORTANT ------
** This file was generated by ZeroCode2 on =<DateStamp>
** DO NOT MODIFY IT, as it can be regenerated at any moment.
** If you need this file changed, change the underlying model or its template.
*/
using System;
using System.Collections.Generic;
using uPromis.Service.Business;
using =<#Parameters.msNameSpace>=<Microservice.Namespace>.Models;
using uPromis.Services.Models;

namespace =<#Parameters.msNameSpace>=<Microservice.Namespace>.Business
{
    public interface I=<Model.Name>BusinessRules : IBusinessRules<Models.=<Model.Name>, =<Model.Name>DTO>
    {

    }
}
%/File

%FileOverwrite:=<#Parameters.msNameSpace>=<Microservice.Namespace>\Business\generated\=<Model.Name>BusinessRules.cs
/*
**             ------ IMPORTANT ------
** This file was generated by ZeroCode2 on =<DateStamp>
** DO NOT MODIFY IT, as it can be regenerated at any moment.
** If you need this file changed, change the underlying model or its template.
*/
using MassTransit;
using Microsoft.Extensions.Logging;
using System;
using System.Collections.Generic;
using System.Security.Claims;
using uPromis.Service.Business;
using uPromis.Services.Models;
using =<#Parameters.msNameSpace>=<Microservice.Namespace>.Models;

namespace =<#Parameters.msNameSpace>=<Microservice.Namespace>.Business
{
    public partial class =<Model.Name>BusinessRules : I=<Model.Name>BusinessRules
    {
        private readonly List<BusinessRuleResult> results = new();
        private readonly I=<Model.Name>Repository Repository;
        private readonly IBus NotificationServerBus;
        private readonly ILogger Logger;

        public =<Model.Name>BusinessRules(I=<Model.Name>Repository repo, IBus notificationServerBus, ILoggerProvider loggerProvider)
        {
            Repository = repo;
            NotificationServerBus = notificationServerBus;
            Logger = loggerProvider.CreateLogger(nameof(=<Model.Name>BusinessRules));
        }

        public List<BusinessRuleResult> Result { get => results; }

        public void ApplyBusinessRules(Models.=<Model.Name> Record, =<Model.Name>DTO DTORecord, ClaimsPrincipal user)
        {
            OnApplyBusinessRules(Record, DTORecord, user);
        }

        partial void OnApplyBusinessRules(Models.=<Model.Name> Record, =<Model.Name>DTO DTORecord, ClaimsPrincipal user);

        public bool HasErrors() => results.Exists(r => r.Severity == BusinessRuleResultSeverity.Error);

        public bool HasWarnings() => HasErrors() || results.Exists(r => r.Severity == BusinessRuleResultSeverity.Warning);

        public bool AllOk() => !HasWarnings();
    }
}
%/File

%FileCreate:=<#Parameters.msNameSpace>=<Microservice.Namespace>\Business\=<Model.Name>BusinessRules.cs
/*
**             ------ IMPORTANT ------
** This file was generated by ZeroCode2 on =<DateStamp>
** YOU CAN MODIFY IT, as it will not be regenerated.
** If you want to regenrate this file simply delete it.
*/
using System;
using System.Collections.Generic;
using System.Security.Claims;
using uPromis.Service.Business;
using uPromis.Services.Models;
using =<#Parameters.msNameSpace>=<Microservice.Namespace>.Models;

namespace =<#Parameters.msNameSpace>=<Microservice.Namespace>.Business
{
    partial class =<Model.Name>BusinessRules : I=<Model.Name>BusinessRules
    {
        partial void OnApplyBusinessRules(Models.=<Model.Name> Record, =<Model.Name>DTO DTORecord, ClaimsPrincipal user)
        {

        }
    }
}
%/File

%/Loop:Controllers